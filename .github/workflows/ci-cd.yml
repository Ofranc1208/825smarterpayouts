name: CI/CD Pipeline - Enterprise Grade

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  NEXT_VERSION: '14.2.29'

jobs:
  # Quality Assurance
  quality-check:
    name: 🧪 Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Security & Dependencies
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Audit dependencies
        run: npm audit --audit-level=moderate

      - name: 🔍 Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build & Test
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [quality-check, security]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run comprehensive tests
        run: |
          npm run test:unit
          npm run test:integration
          npm run test:e2e

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod=false'

      - name: 🔗 Get deployment URL
        id: vercel
        run: |
          echo "url=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} | grep staging | head -1 | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: 📱 Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🚀 Staging deployment successful: ${{ steps.vercel.outputs.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: 🔗 Get production URL
        id: vercel
        run: |
          echo "url=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} | grep production | head -1 | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: 📱 Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🎉 Production deployment successful: ${{ steps.vercel.outputs.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Monitoring
  performance:
    name: 📊 Performance Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📊 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  # Post-Deployment Health Check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 🔍 Check staging health
        if: needs.deploy-staging.result == 'success'
        run: |
          curl -f ${{ needs.deploy-staging.outputs.url }}/api/health || exit 1

      - name: 🔍 Check production health
        if: needs.deploy-production.result == 'success'
        run: |
          curl -f ${{ needs.deploy-production.outputs.url }}/api/health || exit 1

      - name: 📱 Health check notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ Health checks completed successfully"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
